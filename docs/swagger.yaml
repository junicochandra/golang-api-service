basePath: /api/v1
definitions:
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.RegisterResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UserAuthRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.UserAuthResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  dto.UserCreateResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UserDetailResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  dto.UserListResponse:
    properties:
      address:
        type: string
      contact:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      email_verified_at:
        type: string
      id:
        type: integer
      last_login_at:
        type: string
      name:
        type: string
      office:
        type: integer
      photo:
        type: string
      role:
        type: integer
      staff_id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
    required:
    - email
    type: object
  dto.UserUpdateResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: junicodwi.chandra@gmail.com
    name: Junico Dwi Chandra
    url: https://junicochandra.com/
  description: This RESTful API service is developed in Golang using the Gin framework.
    It provides structured endpoints for efficient data management and high-performance
    request handling.
  title: Golang API Service
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserAuthRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserAuthResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Login user
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logout user by invalidating JWT (client-side)
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Logout user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Add a new user to the database
      parameters:
      - description: Register data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.RegisterResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Register a new user
      tags:
      - Auth
  /profile:
    get:
      description: Get user profile
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get user profile with middleware
      tags:
      - Middleware Test
  /users:
    get:
      consumes:
      - application/json
      description: Get all users from database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserListResponse'
            type: array
        "400":
          description: Bad Request
      summary: Get all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Add a new user to the database
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserCreateResponse'
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Create a new user
      tags:
      - Users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user from the database by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get detail information of a specific user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserDetailResponse'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Get user detail
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user data by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserUpdateResponse'
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      summary: Update user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
